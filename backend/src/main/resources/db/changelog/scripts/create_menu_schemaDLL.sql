CREATE SCHEMA  IF NOT EXISTS `menu_schema`;

-- we need this table for inheritance
CREATE TABLE menu_schema.RESTAURANT_DEPENDENT(
    ID VARCHAR(36) PRIMARY KEY default UUID(),
    NAME VARCHAR(36) NOT NULL,
    DESCRIPTION VARCHAR(150) default NULL,
    RESTAURANT_ID VARCHAR(36) DEFAULT NULL,
    CONSTRAINT FK_RESTAURANT_DEPENDENT_RESTAURANT FOREIGN KEY (RESTAURANT_ID) REFERENCES restaurant_schema.RESTAURANT(ID)
);

CREATE TABLE menu_schema.RECIPE(
    ID VARCHAR(36) PRIMARY KEY default UUID(),
    NAME VARCHAR(36) NOT NULL,
    DESCRIPTION VARCHAR(150) default NULL,
    COOK_TIME SMALLINT(3) DEFAULT NULL,
    RESTAURANT_ID VARCHAR(36) DEFAULT NULL,
    CONSTRAINT FK_RECIPE_RESTAURANT FOREIGN KEY (RESTAURANT_ID) REFERENCES restaurant_schema.RESTAURANT(ID),
    UNIQUE KEY U_RECIPE_RESTAURANT (NAME,RESTAURANT_ID)
);

-- only upper case data in this table
CREATE TABLE menu_schema.QUANTITY_TYPE(
	ID VARCHAR(36) PRIMARY KEY,
	CONSTRAINT upper_case_quantity_type CHECK( STRCMP(UPPER(ID),ID) = 0)
);

-- only upper case data in this table
CREATE TABLE menu_schema.ingredient(
	ID VARCHAR(36) PRIMARY KEY,
	QUANTITY_TYPE_ID VARCHAR(20) NOT NULL,
	CONSTRAINT FK_INGREDIENT_QUANTITY_TYPE FOREIGN KEY (QUANTITY_TYPE_ID) REFERENCES QUANTITY_TYPE(ID) ON DELETE CASCADE,
	CONSTRAINT upper_case_ingredient CHECK(STRCMP(UPPER(ID),ID) = 0)
);

CREATE TABLE menu_schema.MENU_TYPE (
	ID VARCHAR(36) PRIMARY KEY,
	DESCRIPTION VARCHAR(50)
);

CREATE TABLE menu_schema.RECIPE_INGREDIENT(
	RECIPE_ID VARCHAR(36),
	INGREDIENT_ID VARCHAR(36),
	QUANTITY DECIMAL(10,2) NOT NULL,
	UNIQUE KEY RECIPE_INGREDIENT_ID (RECIPE_ID,INGREDIENT_ID),
	CONSTRAINT FK_RECIPE_INGREDIENT_INGREDIENT FOREIGN KEY (INGREDIENT_ID) REFERENCES INGREDIENT(ID) ON DELETE CASCADE,
	CONSTRAINT FK_RECIPE_INGREDIENT_RECIPE FOREIGN KEY (RECIPE_ID) REFERENCES RECIPE(ID) ON DELETE CASCADE
);

CREATE TABLE menu_schema.SUBMENU (
	ID VARCHAR(36) PRIMARY KEY default UUID(),
	NAME VARCHAR(36) NOT NULL,
	DESCRIPTION VARCHAR(150),
	PATH_TO_PHOTO VARCHAR(50) DEFAULT NULL,
	RESTAURANT_ID VARCHAR(36) DEFAULT NULL,
    CONSTRAINT FK_SUBMENU_RESTAURANT FOREIGN KEY (RESTAURANT_ID) REFERENCES restaurant_schema.RESTAURANT(ID),
    UNIQUE KEY U_SUBMENU_RESTAURANT (NAME,RESTAURANT_ID)
);

CREATE TABLE menu_schema.CATEGORY (
	ID VARCHAR(36) PRIMARY KEY,
	CONSTRAINT upper_case_category CHECK(STRCMP(UPPER(ID),ID) = 0)
);

CREATE TABLE menu_schema.SUBCATEGORY (
	ID VARCHAR(36) PRIMARY KEY,
	CONSTRAINT upper_case_category CHECK(STRCMP(UPPER(ID),ID) = 0)
);

CREATE TABLE menu_schema.SUBCATEGORY_SUBMENU(
	SUBCATEGORY_ID VARCHAR(36) NOT NULL,
	SUBMENU_ID VARCHAR(36) NOT NULL,
	UNIQUE KEY CATEGORY_SUBMENU_ID (SUBCATEGORY_ID,SUBMENU_ID),
	CONSTRAINT FK_SUBCATEGORY_SUBMENU_SUBCATEGORY_ID FOREIGN KEY (SUBCATEGORY_ID) REFERENCES SUBCATEGORY(ID),
	CONSTRAINT FK_SUBCATEGORY_SUBMENU_SUBMENU_ID FOREIGN KEY (SUBMENU_ID) REFERENCES SUBMENU(ID) ON DELETE CASCADE
);

CREATE TABLE menu_schema.SUBMENU_RECIPE(
	SUBMENU_ID VARCHAR(36) NOT NULL,
	RECIPE_ID VARCHAR(36) NOT NULL,
	CATEGORY_ID VARCHAR(36) NOT NULL,
    -- we should use this field in the order schema as a check
    IS_REQUIRED TINYINT(1) NOT NULL DEFAULT 0,
    -- if price is 0 => FREE
    PRICE DECIMAL(7,2) NOT NULL DEFAULT 0,
	UNIQUE KEY SUBMENU_RECIPE_ID (RECIPE_ID,SUBMENU_ID),
	CONSTRAINT FK_SUBMENU_RECIPE_SUBMENU FOREIGN KEY (SUBMENU_ID) REFERENCES SUBMENU(ID),
	CONSTRAINT FK_SUBMENU_RECIPE_RECIPE FOREIGN KEY (RECIPE_ID) REFERENCES RECIPE(ID),
    CONSTRAINT FK_SUBMENU_RECIPE_CATEGORY_ID FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY(ID)
);